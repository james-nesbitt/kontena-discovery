#!/usr/bin/env bash
#
# RUN DRUPAL CONSOLE
#
# this script creates and runs a temporary container using the drupal console command that is created
# during the composer install.  The contents of the app folder are mounted into a custom container that has
# php-cli installed, and linked to the db container.  This container then passes any arguments directly to
# the console command.
#
#     $/> wundertools drupal module:install devel
#

CONTAINER_ARGS="$@"

if [ ! -f "${PATH_SOURCE}/vendor/bin/drupal" ]; then
  printf "ERROR: There is no Drupal Console in this project. This probably means that you have not run Composer in your project.\n"
  exit 1
fi
if [ ! -d "${PATH_SETTINGS}/console" ]; then
  printf "ERROR: Project Drupal Console configuration path (${PATH_SETTINGS}/console) was missing. Creating it now...\n"
  mkdir -p "${PATH_SETTINGS}/console"
  printf "NOTICE: Project Drupal Console configuration path (${PATH_SETTINGS}/console) created. Please run your command again.\n"
  exit 1
fi
if [ ! -f ${PATH_SETTINGS}/console/config.yml ] && [ ${CONTAINER_ARGS} != "init" ]; then
    printf "ERROR: Project Drupal Console configuration is missing. You need to run 'wundertools drupal init' to start using Drupal Console.\n"
    exit 1
fi

#echo ">>>>>DOCKER:DRUPAL-CONSOLE START [CMD: ${CONTAINER_ARGS}]
#"

docker run --rm -t -i \
    --name="${PROJECT}_drupal" \
    --net "${COMPOSE_NETWORK}" \
    --hostname=${PROJECT} \
    --link="${PROJECT}_db_1:db.app" \
    --volumes-from="${PROJECT}_source_1" \
    --volumes-from="${PROJECT}_assets_1" \
    --volume="${PATH_SETTINGS}/console:${CONTAINER_PATH_HOME}/.console" \
    --volume="${PATH_SETTINGS}/drush:${CONTAINER_PATH_HOME}/.drush" \
    --volume="${PATH_HOME}/.ssh:${CONTAINER_PATH_HOME}/.ssh" \
    -w="${CONTAINER_PATH_WEBROOT}" \
    --entrypoint="${CONTAINER_PATH_VENDOR}/bin/drupal" \
    ${DOCKER_IMAGE_DEVELOPERTOOL} \
    --ansi \
    ${CONTAINER_ARGS}

#echo "
#<<<<<DOCKER:DRUPAL-CONSOLE END "
