#!/usr/bin/env bash
###
# DRUSH
#
# Run drush in a container, connected to source volumes and
# linked to other containers.
# This lets you run drush as though it was installed on the
# host, but without installing php or anything on the host
#
#     $/> wundertools drush cc all
#

if [ ! -d "${PATH_SETTINGS}/drush" ]; then
  printf "NOTICE: Project Drush configuration path (${PATH_SETTINGS}/drush) was missing. Creating it now...\n"
  mkdir -p "${PATH_SETTINGS}/drush"
fi
if [ ! -f "${PATH_SETTINGS}/vendor/bin/drush" ]; then
  printf "ERROR: There is no Drush in this project. This probably means that you have not run Composer in your project.\n"
  exit 1
fi

CONTAINER_ARGS="$@"
# echo ">>>>>DOCKER:DRUSH START [CMD: ${CONTAINER_ARGS}]
# "

docker run --rm -t -i \
    --net "${COMPOSE_NETWORK}" \
    --name="${PROJECT}_drush" \
    --hostname=${PROJECT} \
    --link="${PROJECT}_db_1:db.app" \
    --volumes-from="${PROJECT}_source_1" \
    --volumes-from="${PROJECT}_assets_1" \
    --volume="${PATH_SETTINGS}/drush:${CONTAINER_PATH_HOME}/.drush" \
    --volume="${PATH_HOME}/.ssh:${CONTAINER_PATH_HOME}/.ssh" \
    -w="${CONTAINER_PATH_WEBROOT}" \
    --entrypoint="php" \
    ${DOCKER_IMAGE_DEVELOPERTOOL} \
    "${CONTAINER_PATH_VENDOR}/drush/drush/drush" \
    ${CONTAINER_ARGS}

# echo "
# <<<<<DOCKER:DRUSH END "
